<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<!--//네임스페이스에는 mapper 가 있는 풀 패키지명과 매퍼명을 등록 한다. -->
<mapper namespace="com.utime.burrowNest.user.mapper.UserMapper">

	<insert id="createUser">
		CREATE TABLE BN_USER (
			NO INT PRIMARY KEY AUTO_INCREMENT
			, REG_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP <!-- 생성일 -->
			, UPDATE_DATE TIMESTAMP NOT NULL <!-- 수정일 -->
			, ENABLED BOOLEAN DEFAULT 'N' <!-- 사용 여부 -->
			, ID VARCHAR(32) NOT NULL <!-- ID -->
			, NICK_NAME VARCHAR(128) NOT NULL <!-- 별명 -->
			, ICON VARCHAR(32) NOT NULL <!-- 아이콘 이미지 이름 -->
			, ROLE VARCHAR(16) NOT NULL <!-- 권한 -->
			, NOTE VARCHAR(255) DEFAULT NULL <!-- 비고 -->
			, AUTH_HINT VARCHAR(64) DEFAULT NULL <!-- 계정 찾기 힌트 (이름 + 질문1 + 질문2 + 질문3: 해쉬) -->
			, DAILY_UPLOAD_LIMIT BIGINT DEFAULT 0 <!-- 하루 업로드 제한 (byte) -->
			, DAILY_DOWNLOAD_LIMIT BIGINT DEFAULT 0  <!-- 일일 최대 다운로드 용량 -->
			, MAX_STORAGE_USAGE BIGINT DEFAULT 0 <!-- 저장공간 최대 사용 용량 -->
		)
	</insert>
	
	<insert id="createUserPw">
		CREATE TABLE BN_USER_PW (
			USER_NO INT PRIMARY KEY 
			, UPDATE_DATE TIMESTAMP NOT NULL <!-- 수정일 -->
			, AUTH_VALUE VARCHAR(128) NOT NULL <!-- 비번 -->
			, FAIL_COUNT TINYINT DEFAULT 0 <!-- 암호 틀린 횟수 -->
			, FOREIGN KEY(USER_NO) REFERENCES BN_USER(NO) ON DELETE CASCADE
		)
	</insert>
	
	<!-- 로그인 기록 -->
	<insert id="createLoginRecord">
		CREATE TABLE BN_USER_LOGIN_RECORD (
			NO INT PRIMARY KEY AUTO_INCREMENT
			, REG_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP <!-- 생성일 -->
			, IP VARCHAR(32) NOT NULL
			, USER_AGENT VARCHAR(256) NOT NULL
			, STATUS VARCHAR(32) NOT NULL
			, REQ_ID VARCHAR(32) NOT NULL <!-- 요청 ID -->
			, USER_NO INT DEFAULT -1
		)
	</insert>
	
	<!-- 로그인 기록 추가 -->
	<insert id="insertLoginRecord" parameterType="map">
		INSERT INTO BN_USER_LOGIN_RECORD (
			IP
			<if test="req.userAgent != null and req.userAgent != '' ">
				,USER_AGENT
			</if>
			,STATUS
			,REQ_ID
			<if test="user != null ">
				,USER_NO
			</if>
		) VALUES (
			#{req.ip}
			<if test="req.userAgent != null and req.userAgent != '' ">
				,#{req.userAgent}
			</if>
			,#{status}
			,#{req.id}
			<if test="user != null ">
				,#{user.userNo}
			</if>
		)
	</insert>
	
	<sql id="UserColumn">
		NO AS "userNo"
		, REG_DATE
		, ENABLED
		, ID 
		, NICK_NAME 
		, ICON AS "profileImg"
		, ROLE
	</sql>
	
	<sql id="UserAllColumn">
		<include refid="com.utime.burrowNest.user.mapper.UserMapper.UserColumn"/>
		, UPDATE_DATE 
		, NOTE 
		, AUTH_HINT 
		, DAILY_UPLOAD_LIMIT 
		, DAILY_DOWNLOAD_LIMIT 
		, MAX_STORAGE_USAGE
	</sql>

	<!-- id 조회 -->	
	<select id="getUserId" parameterType="map" resultType="com.utime.burrowNest.user.vo.UserVo">
		SELECT 
			<include refid="UserColumn" /> 
		FROM BN_USER INNER JOIN BN_USER_PW
			ON BN_USER.NO = BN_USER_PW.USER_NO
		WHERE ID = #{id} AND FAIL_COUNT <![CDATA[ <= ]]> 5
	</select>
	
	<!-- 기본 회원 정보 조회 -->
	<select id="getUserIdBasic" parameterType="map" resultType="com.utime.burrowNest.user.vo.UserVo">
		SELECT 
			<include refid="UserAllColumn" /> 
		FROM BN_USER 
		WHERE ID = #{id} AND ENABLED = true
	</select>

	<!-- pw 조회 -->	
	<select id="getUserPw" parameterType="map" resultType="String">
		SELECT 
			 AUTH_VALUE
		FROM BN_USER_PW PW 
			INNER JOIN BN_USER UR ON PW.USER_NO = UR.NO
		WHERE UR.ID = #{id}
	</select>
	
	<!-- pw 추가 -->	
	<update id="insertUserPw" parameterType="map">
		INSERT INTO BN_USER_PW (
			USER_NO
			, UPDATE_DATE
			, AUTH_VALUE
		) VALUES (
			#{user.userNo}
			, CURRENT_TIMESTAMP
			, #{pw, typeHandler=com.utime.burrowNest.user.typeHandler.PasswordEncoderTypeHandler}
		)  
	</update>
	
	<!-- pw 수정. -->
	<update id="updateUserPw" parameterType="map">
		UPDATE BN_USER_PW SET 
			UPDATE_DATE = CURRENT_TIMESTAMP
			, AUTH_VALUE = #{pw, typeHandler=com.utime.burrowNest.user.typeHandler.PasswordEncoderTypeHandler}
		WHERE USER_NO = #{user.userNo}
	</update>
	
	<!-- 사용자 정보 갱신 -->
	<update id="updateUser" parameterType="com.utime.burrowNest.user.vo.UserVo" >
		UPDATE BN_USER SET
			UPDATE_DATE = CURRENT_TIMESTAMP
			, NICK_NAME = #{nickname} 
			, ICON = #{profileImg}
		WHERE NO = #{userNo}
	</update>
	
	<!-- PW 성공 여부 횟수 업데이트 -->
	<update id="updatePwCount" parameterType="map">
		UPDATE BN_USER_PW SET
			UPDATE_DATE = CURRENT_TIMESTAMP
			, FAIL_COUNT = <choose> <when test="isSuccess">0</when> <otherwise>FAIL_COUNT + 1</otherwise> </choose>
		WHERE USER_NO = #{user.userNo}
	</update>
	
</mapper>